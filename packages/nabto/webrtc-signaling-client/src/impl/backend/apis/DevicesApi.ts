/* tslint:disable */
/* eslint-disable */
/**
 * Nabto WebRTC Signaling
 * Development documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpError,
  PostV1DeviceConnect200Response,
  PostV1IceServersRequest,
} from '../models/index';
import {
    HttpErrorFromJSON,
    HttpErrorToJSON,
    PostV1DeviceConnect200ResponseFromJSON,
    PostV1DeviceConnect200ResponseToJSON,
    PostV1IceServersRequestFromJSON,
    PostV1IceServersRequestToJSON,
} from '../models/index';

export interface PostV1DeviceConnectRequest {
    authorization: string;
    postV1IceServersRequest: PostV1IceServersRequest;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     * Allow devices to attach
     */
    async postV1DeviceConnectRaw(requestParameters: PostV1DeviceConnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostV1DeviceConnect200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling postV1DeviceConnect().'
            );
        }

        if (requestParameters['postV1IceServersRequest'] == null) {
            throw new runtime.RequiredError(
                'postV1IceServersRequest',
                'Required parameter "postV1IceServersRequest" was null or undefined when calling postV1DeviceConnect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/v1/device/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostV1IceServersRequestToJSON(requestParameters['postV1IceServersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostV1DeviceConnect200ResponseFromJSON(jsonValue));
    }

    /**
     * Allow devices to attach
     */
    async postV1DeviceConnect(requestParameters: PostV1DeviceConnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostV1DeviceConnect200Response> {
        const response = await this.postV1DeviceConnectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
