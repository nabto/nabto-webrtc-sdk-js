/* tslint:disable */
/* eslint-disable */
/**
 * Nabto WebRTC Signaling
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpError,
  V1ClientConnectPost200Response,
  V1ClientConnectPostRequest,
  V1DeviceConnectPost200Response,
  V1DeviceConnectPostRequest,
  V1IceServersPost200Response,
} from '../models/index';
import {
    HttpErrorFromJSON,
    HttpErrorToJSON,
    V1ClientConnectPost200ResponseFromJSON,
    V1ClientConnectPost200ResponseToJSON,
    V1ClientConnectPostRequestFromJSON,
    V1ClientConnectPostRequestToJSON,
    V1DeviceConnectPost200ResponseFromJSON,
    V1DeviceConnectPost200ResponseToJSON,
    V1DeviceConnectPostRequestFromJSON,
    V1DeviceConnectPostRequestToJSON,
    V1IceServersPost200ResponseFromJSON,
    V1IceServersPost200ResponseToJSON,
} from '../models/index';

export interface V1ClientConnectPostOperationRequest {
    v1ClientConnectPostRequest: V1ClientConnectPostRequest;
    authorization?: string;
}

export interface V1DeviceConnectPostOperationRequest {
    authorization: string;
    v1DeviceConnectPostRequest: V1DeviceConnectPostRequest;
}

export interface V1IceServersPostRequest {
    v1DeviceConnectPostRequest: V1DeviceConnectPostRequest;
    authorization?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async v1ClientConnectPostRaw(requestParameters: V1ClientConnectPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ClientConnectPost200Response>> {
        if (requestParameters['v1ClientConnectPostRequest'] == null) {
            throw new runtime.RequiredError(
                'v1ClientConnectPostRequest',
                'Required parameter "v1ClientConnectPostRequest" was null or undefined when calling v1ClientConnectPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/v1/client/connect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ClientConnectPostRequestToJSON(requestParameters['v1ClientConnectPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ClientConnectPost200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1ClientConnectPost(requestParameters: V1ClientConnectPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ClientConnectPost200Response> {
        const response = await this.v1ClientConnectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1DeviceConnectPostRaw(requestParameters: V1DeviceConnectPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeviceConnectPost200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling v1DeviceConnectPost().'
            );
        }

        if (requestParameters['v1DeviceConnectPostRequest'] == null) {
            throw new runtime.RequiredError(
                'v1DeviceConnectPostRequest',
                'Required parameter "v1DeviceConnectPostRequest" was null or undefined when calling v1DeviceConnectPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/v1/device/connect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeviceConnectPostRequestToJSON(requestParameters['v1DeviceConnectPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeviceConnectPost200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1DeviceConnectPost(requestParameters: V1DeviceConnectPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeviceConnectPost200Response> {
        const response = await this.v1DeviceConnectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async v1IceServersPostRaw(requestParameters: V1IceServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1IceServersPost200Response>> {
        if (requestParameters['v1DeviceConnectPostRequest'] == null) {
            throw new runtime.RequiredError(
                'v1DeviceConnectPostRequest',
                'Required parameter "v1DeviceConnectPostRequest" was null or undefined when calling v1IceServersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/v1/ice-servers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeviceConnectPostRequestToJSON(requestParameters['v1DeviceConnectPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1IceServersPost200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1IceServersPost(requestParameters: V1IceServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1IceServersPost200Response> {
        const response = await this.v1IceServersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
