// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostV1ClientConnectData, PostV1ClientConnectResponses, PostV1ClientConnectErrors, PostV1DeviceConnectData, PostV1DeviceConnectResponses, PostV1DeviceConnectErrors, PostTestClientData, PostTestClientResponses, PostTestClientErrors, PostTestClientByTestIdConnectDeviceData, PostTestClientByTestIdConnectDeviceResponses, PostTestClientByTestIdConnectDeviceErrors, PostTestClientByTestIdDisconnectDeviceData, PostTestClientByTestIdDisconnectDeviceResponses, PostTestClientByTestIdDisconnectDeviceErrors, PostTestClientByTestIdDropDeviceMessagesData, PostTestClientByTestIdDropDeviceMessagesResponses, PostTestClientByTestIdDropDeviceMessagesErrors, PostTestClientByTestIdDisconnectClientData, PostTestClientByTestIdDisconnectClientResponses, PostTestClientByTestIdDisconnectClientErrors, PostTestClientByTestIdDropClientMessagesData, PostTestClientByTestIdDropClientMessagesResponses, PostTestClientByTestIdDropClientMessagesErrors, PostTestClientByTestIdWaitForDeviceMessagesData, PostTestClientByTestIdWaitForDeviceMessagesResponses, PostTestClientByTestIdWaitForDeviceMessagesErrors, PostTestClientByTestIdWaitForDeviceErrorData, PostTestClientByTestIdWaitForDeviceErrorResponses, PostTestClientByTestIdWaitForDeviceErrorErrors, PostTestClientByTestIdSendDeviceMessagesData, PostTestClientByTestIdSendDeviceMessagesResponses, PostTestClientByTestIdSendDeviceMessagesErrors, PostTestClientByTestIdSendDeviceErrorData, PostTestClientByTestIdSendDeviceErrorResponses, PostTestClientByTestIdSendDeviceErrorErrors, PostTestClientByTestIdSendNewMessageTypeData, PostTestClientByTestIdSendNewMessageTypeResponses, PostTestClientByTestIdSendNewMessageTypeErrors, PostTestClientByTestIdSendNewFieldInKnownMessageTypeData, PostTestClientByTestIdSendNewFieldInKnownMessageTypeResponses, PostTestClientByTestIdSendNewFieldInKnownMessageTypeErrors, PostTestClientByTestIdGetActiveWebsocketsData, PostTestClientByTestIdGetActiveWebsocketsResponses, PostTestClientByTestIdGetActiveWebsocketsErrors, DeleteTestClientByTestIdData, DeleteTestClientByTestIdResponses, PostTestDeviceData, PostTestDeviceResponses, PostTestDeviceErrors, PostTestDeviceByTestIdClientsData, PostTestDeviceByTestIdClientsResponses, PostTestDeviceByTestIdClientsErrors, PostTestDeviceByTestIdClientsByClientIdConnectData, PostTestDeviceByTestIdClientsByClientIdConnectResponses, PostTestDeviceByTestIdClientsByClientIdConnectErrors, PostTestDeviceByTestIdClientsByClientIdDisconnectData, PostTestDeviceByTestIdClientsByClientIdDisconnectResponses, PostTestDeviceByTestIdClientsByClientIdDisconnectErrors, PostTestDeviceByTestIdClientsByClientIdDropClientMessagesData, PostTestDeviceByTestIdClientsByClientIdDropClientMessagesResponses, PostTestDeviceByTestIdClientsByClientIdDropClientMessagesErrors, PostTestDeviceByTestIdDisconnectDeviceData, PostTestDeviceByTestIdDisconnectDeviceResponses, PostTestDeviceByTestIdDisconnectDeviceErrors, PostTestDeviceByTestIdDropDeviceMessagesData, PostTestDeviceByTestIdDropDeviceMessagesResponses, PostTestDeviceByTestIdDropDeviceMessagesErrors, PostTestDeviceByTestIdClientsByClientIdWaitForMessagesData, PostTestDeviceByTestIdClientsByClientIdWaitForMessagesResponses, PostTestDeviceByTestIdClientsByClientIdWaitForMessagesErrors, PostTestDeviceByTestIdClientsByClientIdSendMessagesData, PostTestDeviceByTestIdClientsByClientIdSendMessagesResponses, PostTestDeviceByTestIdClientsByClientIdSendMessagesErrors, PostTestDeviceByTestIdClientsByClientIdSendErrorData, PostTestDeviceByTestIdClientsByClientIdSendErrorResponses, PostTestDeviceByTestIdClientsByClientIdSendErrorErrors, PostTestDeviceByTestIdSendNewMessageTypeData, PostTestDeviceByTestIdSendNewMessageTypeResponses, PostTestDeviceByTestIdSendNewMessageTypeErrors, DeleteTestDeviceByTestIdData, DeleteTestDeviceByTestIdResponses, PostTestDeviceByTestIdClientsByClientIdWaitForErrorData, PostTestDeviceByTestIdClientsByClientIdWaitForErrorResponses, PostTestDeviceByTestIdClientsByClientIdWaitForErrorErrors, PostV1IceServersData, PostV1IceServersResponses, PostV1IceServersErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postV1ClientConnect = <ThrowOnError extends boolean = false>(options: Options<PostV1ClientConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1ClientConnectResponses, PostV1ClientConnectErrors, ThrowOnError>({
        url: '/v1/client/connect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postV1DeviceConnect = <ThrowOnError extends boolean = false>(options: Options<PostV1DeviceConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1DeviceConnectResponses, PostV1DeviceConnectErrors, ThrowOnError>({
        url: '/v1/device/connect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClient = <ThrowOnError extends boolean = false>(options: Options<PostTestClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientResponses, PostTestClientErrors, ThrowOnError>({
        url: '/test/client/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdConnectDevice = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdConnectDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdConnectDeviceResponses, PostTestClientByTestIdConnectDeviceErrors, ThrowOnError>({
        url: '/test/client/{testId}/connect-device',
        ...options
    });
};

export const postTestClientByTestIdDisconnectDevice = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdDisconnectDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdDisconnectDeviceResponses, PostTestClientByTestIdDisconnectDeviceErrors, ThrowOnError>({
        url: '/test/client/{testId}/disconnect-device',
        ...options
    });
};

export const postTestClientByTestIdDropDeviceMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdDropDeviceMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdDropDeviceMessagesResponses, PostTestClientByTestIdDropDeviceMessagesErrors, ThrowOnError>({
        url: '/test/client/{testId}/drop-device-messages',
        ...options
    });
};

export const postTestClientByTestIdDisconnectClient = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdDisconnectClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdDisconnectClientResponses, PostTestClientByTestIdDisconnectClientErrors, ThrowOnError>({
        url: '/test/client/{testId}/disconnect-client',
        ...options
    });
};

export const postTestClientByTestIdDropClientMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdDropClientMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdDropClientMessagesResponses, PostTestClientByTestIdDropClientMessagesErrors, ThrowOnError>({
        url: '/test/client/{testId}/drop-client-messages',
        ...options
    });
};

export const postTestClientByTestIdWaitForDeviceMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdWaitForDeviceMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdWaitForDeviceMessagesResponses, PostTestClientByTestIdWaitForDeviceMessagesErrors, ThrowOnError>({
        url: '/test/client/{testId}/wait-for-device-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdWaitForDeviceError = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdWaitForDeviceErrorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdWaitForDeviceErrorResponses, PostTestClientByTestIdWaitForDeviceErrorErrors, ThrowOnError>({
        url: '/test/client/{testId}/wait-for-device-error',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdSendDeviceMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdSendDeviceMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdSendDeviceMessagesResponses, PostTestClientByTestIdSendDeviceMessagesErrors, ThrowOnError>({
        url: '/test/client/{testId}/send-device-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdSendDeviceError = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdSendDeviceErrorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdSendDeviceErrorResponses, PostTestClientByTestIdSendDeviceErrorErrors, ThrowOnError>({
        url: '/test/client/{testId}/send-device-error',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdSendNewMessageType = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdSendNewMessageTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdSendNewMessageTypeResponses, PostTestClientByTestIdSendNewMessageTypeErrors, ThrowOnError>({
        url: '/test/client/{testId}/send-new-message-type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdSendNewFieldInKnownMessageType = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdSendNewFieldInKnownMessageTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdSendNewFieldInKnownMessageTypeResponses, PostTestClientByTestIdSendNewFieldInKnownMessageTypeErrors, ThrowOnError>({
        url: '/test/client/{testId}/send-new-field-in-known-message-type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestClientByTestIdGetActiveWebsockets = <ThrowOnError extends boolean = false>(options: Options<PostTestClientByTestIdGetActiveWebsocketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestClientByTestIdGetActiveWebsocketsResponses, PostTestClientByTestIdGetActiveWebsocketsErrors, ThrowOnError>({
        url: '/test/client/{testId}/get-active-websockets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTestClientByTestId = <ThrowOnError extends boolean = false>(options: Options<DeleteTestClientByTestIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTestClientByTestIdResponses, unknown, ThrowOnError>({
        url: '/test/client/{testId}',
        ...options
    });
};

export const postTestDevice = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceResponses, PostTestDeviceErrors, ThrowOnError>({
        url: '/test/device/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestDeviceByTestIdClients = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsResponses, PostTestDeviceByTestIdClientsErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients',
        ...options
    });
};

export const postTestDeviceByTestIdClientsByClientIdConnect = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdConnectResponses, PostTestDeviceByTestIdClientsByClientIdConnectErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/connect',
        ...options
    });
};

export const postTestDeviceByTestIdClientsByClientIdDisconnect = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdDisconnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdDisconnectResponses, PostTestDeviceByTestIdClientsByClientIdDisconnectErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/disconnect',
        ...options
    });
};

export const postTestDeviceByTestIdClientsByClientIdDropClientMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdDropClientMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdDropClientMessagesResponses, PostTestDeviceByTestIdClientsByClientIdDropClientMessagesErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/drop-client-messages',
        ...options
    });
};

export const postTestDeviceByTestIdDisconnectDevice = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdDisconnectDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdDisconnectDeviceResponses, PostTestDeviceByTestIdDisconnectDeviceErrors, ThrowOnError>({
        url: '/test/device/{testId}/disconnect-device',
        ...options
    });
};

export const postTestDeviceByTestIdDropDeviceMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdDropDeviceMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdDropDeviceMessagesResponses, PostTestDeviceByTestIdDropDeviceMessagesErrors, ThrowOnError>({
        url: '/test/device/{testId}/drop-device-messages',
        ...options
    });
};

export const postTestDeviceByTestIdClientsByClientIdWaitForMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdWaitForMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdWaitForMessagesResponses, PostTestDeviceByTestIdClientsByClientIdWaitForMessagesErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/wait-for-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestDeviceByTestIdClientsByClientIdSendMessages = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdSendMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdSendMessagesResponses, PostTestDeviceByTestIdClientsByClientIdSendMessagesErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/send-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestDeviceByTestIdClientsByClientIdSendError = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdSendErrorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdSendErrorResponses, PostTestDeviceByTestIdClientsByClientIdSendErrorErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/send-error',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postTestDeviceByTestIdSendNewMessageType = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdSendNewMessageTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdSendNewMessageTypeResponses, PostTestDeviceByTestIdSendNewMessageTypeErrors, ThrowOnError>({
        url: '/test/device/{testId}/send-new-message-type',
        ...options
    });
};

export const deleteTestDeviceByTestId = <ThrowOnError extends boolean = false>(options: Options<DeleteTestDeviceByTestIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTestDeviceByTestIdResponses, unknown, ThrowOnError>({
        url: '/test/device/{testId}',
        ...options
    });
};

export const postTestDeviceByTestIdClientsByClientIdWaitForError = <ThrowOnError extends boolean = false>(options: Options<PostTestDeviceByTestIdClientsByClientIdWaitForErrorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTestDeviceByTestIdClientsByClientIdWaitForErrorResponses, PostTestDeviceByTestIdClientsByClientIdWaitForErrorErrors, ThrowOnError>({
        url: '/test/device/{testId}/clients/{clientId}/wait-for-error',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postV1IceServers = <ThrowOnError extends boolean = false>(options: Options<PostV1IceServersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV1IceServersResponses, PostV1IceServersErrors, ThrowOnError>({
        url: '/v1/ice-servers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};